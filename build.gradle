plugins {
    id 'java'
    id 'jacoco'
    id "io.gitlab.plunts.plantuml" version "2.1.2"
}

group = 'src/com/company'
version = '1.0-SNAPSHOT'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

ext {
    springVersion = '6.1.3'
    lombokVersion = '1.18.28'
    logbackVersion = '1.4.12'
    junitVersion = '5.8.2'
    mockitoVersion = '4.8.0'
}

dependencies {

    implementation "org.springframework:spring-core:$springVersion"
    implementation "org.springframework:spring-beans:$springVersion"
    implementation "org.springframework:spring-context:$springVersion"
    implementation "org.springframework:spring-context-support:$springVersion"
    implementation "org.springframework:spring-expression:$springVersion"

    testImplementation "org.springframework:spring-test:$springVersion"

    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.0.0-M4'

    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }
        }
    }
}

classDiagrams {
    diagram {
        name "Visualise Package"
        include packages().withNameLike('com.company.*')
        writeTo file('diagrams/xyz.puml')
    }
}


check.dependsOn jacocoTestCoverageVerification
